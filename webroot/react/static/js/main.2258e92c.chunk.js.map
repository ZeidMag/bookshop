{"version":3,"sources":["components/BooksNew.js","App.js","reportWebVitals.js","index.js"],"names":["BooksNew","getRequestTest","e","a","preventDefault","console","log","axios","get","response","data","books","postRequestTest","fetch","mode","method","cache","headers","Accept","body","JSON","stringify","title","pages","publish_year","author_id","json","className","onClick","App","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAoFeA,EAjFE,WACf,IAAMC,EAAc,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACrBD,EAAEE,iBACFC,QAAQC,IAAI,gBAFS,SAIEC,IAAMC,IAAI,mCAJZ,OAIfC,EAJe,OAoBrBJ,QAAQC,IAAI,eACZD,QAAQC,IAAIG,GAGZJ,QAAQC,IAAI,WAEZD,QAAQC,IAAIG,EAASC,KAAKC,OA1BL,2CAAH,sDAgCdC,EAAe,uCAAG,WAAOV,GAAP,iBAAAC,EAAA,6DACtBD,EAAEE,iBACFC,QAAQC,IAAI,gBAFU,SAGCO,MAAM,kCAAmC,CAC9DC,KAAM,OACNC,OAAQ,OACRC,MAAO,WAEPC,QAAS,CAIP,mBAAoB,iBACpBC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,MAAO,0BACPC,MAAO,IACPC,aAAc,KACdC,UAAW,MApBO,cAGhBhB,EAHgB,OAwBtBJ,QAAQC,IAAI,eACZD,QAAQC,IAAIG,GAzBU,SA0BHA,EAASiB,OA1BN,OA0BhBhB,EA1BgB,OA4BtBL,QAAQC,IAAI,WACZD,QAAQC,IAAII,GA7BU,4CAAH,sDAgCrB,OACE,qCACE,4CACA,qBAAKiB,UAAU,GAAf,SACE,wBAAQC,QAAS3B,EAAjB,wBAEF,qBAAK0B,UAAU,GAAf,SACE,wBAAQC,QAAShB,EAAjB,6BC5DOiB,EAXf,4JACE,WACE,OACE,mCAEE,cAAC,EAAD,UALR,GAAyBC,aCQVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2258e92c.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst BooksNew = () => {\r\n  const getRequestTest = async (e) => {\r\n    e.preventDefault();\r\n    console.log('function ran');\r\n    // try {\r\n    const response = await axios.get('http://localhost/bookshop/books');\r\n    // const response = await fetch('http://localhost/bookshop/books', {\r\n    //   mode: 'cors',\r\n    //   method: 'GET',\r\n    //   cache: 'no-cache',\r\n    //   //   credentials: 'include',\r\n    //   headers: {\r\n    //     // need X-Requested-With header\r\n    //     // so you CakePHP can check it's ajax\r\n    //     // with $this->request->is('ajax');\r\n    //     'X-Requested-With': 'XMLHttpRequest',\r\n    //     Accept: 'application/json',\r\n    //     'Content-Type': 'application/json',\r\n    //   },\r\n    // });\r\n    // setResState(response);\r\n    console.log('response is');\r\n    console.log(response);\r\n    // const data = await response.json();\r\n    // setDataState(data);\r\n    console.log('data is');\r\n    // console.log(response.data);\r\n    console.log(response.data.books);\r\n    // } catch (error) {\r\n    //   console.log(error);\r\n    // }\r\n  };\r\n\r\n  const postRequestTest = async (e) => {\r\n    e.preventDefault();\r\n    console.log('function ran');\r\n    const response = await fetch('http://localhost/bookshop/books', {\r\n      mode: 'cors',\r\n      method: 'POST',\r\n      cache: 'no-cache',\r\n      //   credentials: 'include',\r\n      headers: {\r\n        // need X-Requested-With header\r\n        // so you CakePHP can check it's ajax\r\n        // with $this->request->is('ajax');\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        title: 'another test from react',\r\n        pages: 110,\r\n        publish_year: 2020,\r\n        author_id: 2,\r\n      }),\r\n    });\r\n    // setResState(response);\r\n    console.log('response is');\r\n    console.log(response);\r\n    const data = await response.json();\r\n    // setDataState(data);\r\n    console.log('data is');\r\n    console.log(data);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>new books</div>\r\n      <div className=\"\">\r\n        <button onClick={getRequestTest}>Get test</button>\r\n      </div>\r\n      <div className=\"\">\r\n        <button onClick={postRequestTest}>Post test</button>\r\n      </div>\r\n\r\n      {/* <button onClick={() => console.log(resState)}>show response</button>\r\n      <button onClick={() => console.log(dataState)}>show data</button> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BooksNew;\r\n","import React, { Component } from 'react';\n// import Books from './components/Books';\nimport BooksNew from './components/BooksNew';\n\nexport class App extends Component {\n  render() {\n    return (\n      <>\n        {/* <Books /> */}\n        <BooksNew />\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}